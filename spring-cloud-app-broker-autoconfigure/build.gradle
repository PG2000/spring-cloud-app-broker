/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "Spring Cloud App Broker Autoconfiguration"

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
	}
}

java {
	registerFeature("logging") {
		usingSourceSet(sourceSets.main)
	}
}

dependencies {
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
	annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor")

	compileOnly "org.immutables:value:2.8.8"

	implementation project(":spring-cloud-app-broker-core")
	implementation project(":spring-cloud-app-broker-deployer")
	implementation project(":spring-cloud-app-broker-deployer-cloudfoundry")
	implementation project(":spring-cloud-app-broker-security-credhub")
	implementation("org.springframework.boot:spring-boot-starter")
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("org.cloudfoundry:cloudfoundry-client-reactor:${cfJavaClientVersion}")
	implementation("org.cloudfoundry:cloudfoundry-operations:${cfJavaClientVersion}")
	implementation("org.springframework.credhub:spring-credhub-starter:${springCredhubVersion}")

	loggingImplementation project(":spring-cloud-app-broker-logging")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.boot:spring-boot-starter-webflux")
	testImplementation("io.projectreactor.tools:blockhound-junit-platform:${blockHoundVersion}")

	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

compileJava.dependsOn(processResources)
